services:
  # PostgreSQL database
  db:
    image: postgres:16
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
      POSTGRES_DB: default
    healthcheck:
      test: pg_isready -U postgres -h localhost -d default
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

  # Redis cache (REQUIRED from version 0.23+)
  redis:
    image: redis:alpine
    restart: always
    command: ["--maxmemory-policy", "noeviction"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Init container - creates schemas and runs migrations
  init:
    image: twentycrm/twenty:${TAG:-latest}
    command: |
      sh -c "
        echo 'Installing PostgreSQL client...'
        apt-get update && apt-get install -y postgresql-client || true
        echo 'Waiting for database...'
        until pg_isready -h db -U postgres -d default; do
          sleep 1
        done
        echo 'Creating schemas...'
        PGPASSWORD=$POSTGRES_PASSWORD psql -h db -U postgres -d default -c 'CREATE SCHEMA IF NOT EXISTS core; CREATE SCHEMA IF NOT EXISTS metadata;' || true
        echo 'Running migrations...'
        yarn database:migrate:prod || true
        echo 'Init completed!'
      "
    environment:
      PG_DATABASE_URL: postgres://postgres:${SERVICE_PASSWORD_POSTGRES}@db:5432/default
      POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
      REDIS_URL: redis://redis:6379
      APP_SECRET: $SERVICE_BASE64_64_APP
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: "no"

  # Twenty server
  server:
    image: twentycrm/twenty:${TAG:-v0.52.6}
    volumes:
      - server-data:/app/packages/twenty-server/.local-storage
    environment:
      # Coolify magic - automatic FQDN
      SERVICE_FQDN_SERVER_3000: ${SERVICE_FQDN_SERVER_3000}
      
      # Basic configuration
      NODE_PORT: 3000
      SERVER_URL: ${SERVICE_FQDN_SERVER}
      FRONT_BASE_URL: ${SERVICE_FQDN_SERVER}
      
      # Database
      PG_DATABASE_URL: postgres://postgres:${SERVICE_PASSWORD_POSTGRES}@db:5432/default
      
      # Redis (all possible formats for compatibility)
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_STORAGE_TYPE: redis
      
      # Security tokens (Coolify generates automatically)
      APP_SECRET: $SERVICE_BASE64_64_APP
      ACCESS_TOKEN_SECRET: $SERVICE_BASE64_32_ACCESS
      LOGIN_TOKEN_SECRET: $SERVICE_BASE64_32_LOGIN
      REFRESH_TOKEN_SECRET: $SERVICE_BASE64_32_REFRESH
      FILE_TOKEN_SECRET: $SERVICE_BASE64_32_FILE
      
      # Migrations - disabled, because they already ran in init container
      ENABLE_DB_MIGRATIONS: false
      DISABLE_DB_MIGRATIONS: true
      
      # Storage
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      
      # API Rate Limiting
      API_RATE_LIMITING_TTL: ${API_RATE_LIMITING_TTL:-100}
      API_RATE_LIMITING_LIMIT: ${API_RATE_LIMITING_LIMIT:-100}
      
      # Optional features
      IS_MULTIWORKSPACE_ENABLED: ${IS_MULTIWORKSPACE_ENABLED:-false}
      IS_SIGN_UP_DISABLED: ${IS_SIGN_UP_DISABLED:-false}
      
    depends_on:
      migration:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3000/healthz || exit 1
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: always

  # Twenty worker
  worker:
    image: twentycrm/twenty:${TAG:-v0.52.6}
    volumes:
      - server-data:/app/packages/twenty-server/.local-storage
    command: ["yarn", "worker:prod"]
    environment:
      # Database
      PG_DATABASE_URL: postgres://postgres:${SERVICE_PASSWORD_POSTGRES}@db:5432/default
      
      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_STORAGE_TYPE: redis
      
      # Security tokens (same as server)
      APP_SECRET: $SERVICE_BASE64_64_APP
      ACCESS_TOKEN_SECRET: $SERVICE_BASE64_32_ACCESS
      LOGIN_TOKEN_SECRET: $SERVICE_BASE64_32_LOGIN
      REFRESH_TOKEN_SECRET: $SERVICE_BASE64_32_REFRESH
      FILE_TOKEN_SECRET: $SERVICE_BASE64_32_FILE
      
      # Migrations disabled
      ENABLE_DB_MIGRATIONS: false
      DISABLE_DB_MIGRATIONS: true
      
      # Storage
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      
      # URL
      SERVER_URL: ${SERVICE_FQDN_SERVER}
      
    depends_on:
      migration:
        condition: service_completed_successfully
      server:
        condition: service_started
    restart: always

volumes:
  db-data:
  server-data:
